name: refresh

on:
  workflow_dispatch:
  schedule:
    - cron: '21 13 4,15,26 * *'
  # watch:
  #   types: [started]

jobs:
  auto-update:
    runs-on: ubuntu-latest
    permissions:
      # Read repository contents
      contents: write
       # Write/update Actions secrets (required for token persistence)
      actions: write

    steps:
      # Checkout repository to access source code
      - name: Checkout
        uses: actions/checkout@v3

      # Install .NET 10 SDK for C# script execution
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '10.0.x'
          
      # Refresh OAuth2 refresh tokens for all configured accounts 
      # This mode:
      # - Exchanges current refresh tokens for new ones
      # - Encrypts and writes updated tokens back to GitHub Secrets (ACCOUNTS_JSON)
      # - Prevents token expiration that would break automated workflows
      - name: Refresh and Persist OAuth Tokens
        shell: bash
        env: 
          # Current repository identifier in 'owner/repo' format
          REPO:  ${{ github.repository }}    
          # Personal Access Token (PAT)
          PAT: ${{ secrets.PAT }}               
          # JSON configuration containing multiple Microsoft accounts
          # Format: [{"ClientId":"...", "ClientSecret":"...", "RefreshToken":"..."}]
          ACCOUNTS_JSON: ${{ secrets.ACCOUNTS_JSON }}
        run: |
          cd src
          dotnet run Program.cs refresh

      # Write the refresh log back to the repository
      - name: Write refresh.log
        if: success()
        shell: bash
        run: |        
          TS="$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Last refresh token succeeded at ${TS}" > refresh.log
          echo "Wrote refresh.log with timestamp: ${TS}"

          set -e
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add refresh.log
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            COMMIT_MSG="refresh log"
            # protect against concurrent updates
            git pull --rebase
            git commit -m "chore: ${COMMIT_MSG}"
            git push
            echo "Committed and pushed refresh.log"
          fi